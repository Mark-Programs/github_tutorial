Github commands

VERSION = 		
	$ git --version

CONFIG	=		
	$ git config --global -l (lists all in the global file)
	$ git config --global user.name "<your username>"
	$ git config --global user.email "<your email>"

NOTE: Must always be in the proper folder in GITBASH to access that repo, push/pull data

-----------------------------------------------------------
BASIC COMMANDS --------------------------------------------
Initialize 	= 	git init
	- this begins file tracking, each repo needs its own link to a repo in github

Status		=	git status			(shows status of files in that "repo")

Add to commit =	git add <filename>	(adds a single file)
				git add * 			(adds all files)
				git add .			(adds the files in the current folder)

Commit		=	git commit -m "<message>"	(put in a message that states what was commited)
				- this means the data is ready to be pushed to Github

-----------------------------------------------------------
ORIGINS----------------------------------------------------
Set 	=	git remote add origin git@github.com:<gitHubUsername>/<reponame>
				- ie: https://github.com/ihechikara/git-and-github-tutorial.git
				
-----------------------------------------------------------
BRANCES ---------------------------------------------------
Rename =	git branch -M main  (renames from MASTER to MAIN)
				NOTE----The "git status" must return a clean value 
					before you can change from master to main!
					

Push	=	git push -u origin main	
			- pushes the "main" branch to the "origin" (in this case the remote origin we set) 
			OR
			git push <remote> --all (pushes all local branches to specified remote)
				
			git push <remote> --tags (the --all option doesn't push all tags, 
				do this command to push them all to the remote repo)

Branch: 	allows the editing of a file (or several files) without messing up the original copy.
			- OPTIONS: Merge the changes to the original copy, or keep an independent branch.


New branch  = 	git checkout -b <NameOfNewBranch>
				- Checkout tells git to switch to a new branch
				- -b tells git to create a new branch
				- then ends with the desired name of the branch
	
CHECK ALL BRANCHES IN REPO:		git branch
								- asterisk shown next to active branch
	
Switching Branches  :	git checkout <branch name>

MERGE
Changes in current branch to main:  git merge <branchName>
	
Branch, push to github:		git checkout test
							git push -u origin <branchName>



-----------------------------------------------------------
PULLING A RESPOSITORY -------------------------------------
	In Gitbash, you will have to be in a different (non active) directory
	In GitHub, go to the repository, there is a button that "CODE"
	- click the button, select HTTPS, then copy the line
	GitBash:
		git clone <paste URL here>
		- this will PULL the repository from the remote onto the local computer
			
-----------------------------------------------------------
CLONE REPO ------------------------------------------------
Remote repo:	git clone <git path>	[ie: git clone https://github.com/usr/name.git]
Local repo:		git clone <path to folder>

Issues with repo updated, but local not:
1a. Save to stash (preserve local changes)
	a. git stash --include-untracked
1b. Discard local changes
	a. git reset --hard   	(only if you know you don't need them)
	b. git clean -fd		(If also have new/untracked files, clean is req'd to remove them)
2. THEN git pull

GIT PULL commands:
- git pull <remote> <branch>	(normal pull)
- git remote -v 				(see the remotes)
add main repo as a remote:
	git remote add <remote-name> <url>

FETCH files w/o merging:
	git fetch (only downloads, doesn't integrate new data into working files)


Typical Cycle, pulling remote to local:
1. git checkout <master branch name> (switch to master)
2. git pull origin (fetch and merge)

---------------------------------------------------------------------------
Misc Commands ================================
git log			// show commit history
git log --pretty=oneline	// one-line display of commits
git log --pretty=oneline --max-count=2
git log --pretty=oneline --since='5 minutes ago'
git log --pretty=oneline --until='5 minutes ago'
git log --pretty=oneline --author=<your name>
git log --pretty=oneline --all
git log --all --pretty=format:'%h %cd %s (%an)' --since='7 days ago'
	--author=jim	// searches author as well

--pretty=”…”  -Defines format of the output
%h:  abbv hash of the commit
%d:  any docorations on the commit (branch heads/tags)
%ad: author date
%s:  the comment
%an: author name
--graph: display commit tree in ASCII graph layout
--date=short: truncated date format
---------------------------------------------------------------------------
.gitconfig
-------------------------
[alias] 
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  type = cat-file -t
  dump = cat-file -p

**** ALIASES are SHORTCUTS the user can utilize for easier interactions

…this is NOT stored in .gitconfig ...GLOBAL config that is
--- this will have to be done for each master/main that has been initialized, in that specific .git folder

.profile    (only avialable if the shell supports it)
	alias gs='git status '
	alias ga='git add '
	alias gb='git branch '
	alias gc='git commit'
	alias gd='git diff'
	alias gco='git checkout '
	alias gk='gitk --all&'
	alias gx='gitx --all'

	alias got='git '
	alias get='git '

$ git hist 		//shows hash value representations of each previous version/commit
				//    see the alias reference above

$ git checkout <hash>
^^ reverts to that specific point in history
To revert back to most up to date version:
$ git checkout master

$ git tag <version>
ie git tag v1

git checkout v1^  		//basically means "the first ancestor of v1"
	*** if there are issues, try: git checkout v1~1

git tag			// view all tags


UNDO STAGED CHANGES (after using 'git add')
	$ git reset HEAD <filename if desired>

REMOVE COMMITS FROM BRANCH:
	$ git reset --hard v1

RESET RULES:::::
	When given a commit reference (i.e. a hash, branch or tag name), the reset command will …
	1.	Rewrite the current branch to point to the specified commit
	2.	Optionally reset the staging area to match the specified commit
	3.	Optionally reset the working directory to match the specified commit

REVERT CHANGES 'AFTER' COMMIT:
	$ git revert HEAD

AMEND previous commit
	$ git commit --amend -m "<new commit msg>"


===== MERGING =====
These commands merges the master INTO greet
	$ git checkout greet
	$ git merge master
	$ git hist --all	// reference alias as before
**** NOTE>>> You have to be in the branch you want to become the master branch


------------- NOTE ----------
	To fix conflicts in a file, you will have to MANUALLY update that file!

git doesn’t provide any graphical merge tools, but it will gladly work with any third party merge tool you wish to use. 
See http://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#External-Merge-and-Diff-Tools for a description of using the Perforce merge tool with git.


=============================================================
GIT IGNORE ==================================================
=============================================================

# ignore all .a files
	> *.a

# but do track lib.a, even though you're ignoring .a files above
	> !lib.a

# only ignore the TODO file in the current directory, not subdir/	 > TODO
	> /TODO

# ignore all files in any directory named build
	> build/

# ignore doc/notes.txt, but not doc/server/arch.txt
	> doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
	> doc/**/*.pdf



